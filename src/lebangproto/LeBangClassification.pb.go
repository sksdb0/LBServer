// Code generated by protoc-gen-go.
// source: LeBangClassification.proto
// DO NOT EDIT!

package lebangproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Classification struct {
	Classification string `protobuf:"bytes,1,opt,name=classification" json:"classification,omitempty"`
	Labels         string `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
	Hint           string `protobuf:"bytes,3,opt,name=hint" json:"hint,omitempty"`
}

func (m *Classification) Reset()                    { *m = Classification{} }
func (m *Classification) String() string            { return proto.CompactTextString(m) }
func (*Classification) ProtoMessage()               {}
func (*Classification) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *Classification) GetClassification() string {
	if m != nil {
		return m.Classification
	}
	return ""
}

func (m *Classification) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *Classification) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

type GetClassificationReq struct {
	Typename string `protobuf:"bytes,1,opt,name=typename" json:"typename,omitempty"`
}

func (m *GetClassificationReq) Reset()                    { *m = GetClassificationReq{} }
func (m *GetClassificationReq) String() string            { return proto.CompactTextString(m) }
func (*GetClassificationReq) ProtoMessage()               {}
func (*GetClassificationReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *GetClassificationReq) GetTypename() string {
	if m != nil {
		return m.Typename
	}
	return ""
}

type GetClassificationRes struct {
	Classification *Classification `protobuf:"bytes,1,opt,name=classification" json:"classification,omitempty"`
	Errorcode      string          `protobuf:"bytes,2,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (m *GetClassificationRes) Reset()                    { *m = GetClassificationRes{} }
func (m *GetClassificationRes) String() string            { return proto.CompactTextString(m) }
func (*GetClassificationRes) ProtoMessage()               {}
func (*GetClassificationRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *GetClassificationRes) GetClassification() *Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

func (m *GetClassificationRes) GetErrorcode() string {
	if m != nil {
		return m.Errorcode
	}
	return ""
}

func init() {
	proto.RegisterType((*Classification)(nil), "lebangproto.Classification")
	proto.RegisterType((*GetClassificationReq)(nil), "lebangproto.GetClassificationReq")
	proto.RegisterType((*GetClassificationRes)(nil), "lebangproto.GetClassificationRes")
}

func init() { proto.RegisterFile("LeBangClassification.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xf2, 0x49, 0x75, 0x4a,
	0xcc, 0x4b, 0x77, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0x49, 0x4d, 0x4a, 0xcc, 0x4b, 0x07, 0x73,
	0x94, 0x52, 0xb8, 0xf8, 0x50, 0x15, 0x09, 0xa9, 0x71, 0xf1, 0x25, 0xa3, 0x88, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0xa1, 0x89, 0x0a, 0x89, 0x71, 0xb1, 0xe5, 0x24, 0x26, 0xa5, 0xe6, 0x14,
	0x4b, 0x30, 0x81, 0xe5, 0xa1, 0x3c, 0x21, 0x21, 0x2e, 0x96, 0x8c, 0xcc, 0xbc, 0x12, 0x09, 0x66,
	0xb0, 0x28, 0x98, 0xad, 0x64, 0xc4, 0x25, 0xe2, 0x9e, 0x5a, 0x82, 0x6a, 0x51, 0x50, 0x6a, 0xa1,
	0x90, 0x14, 0x17, 0x47, 0x49, 0x65, 0x41, 0x6a, 0x5e, 0x62, 0x6e, 0x2a, 0xd4, 0x16, 0x38, 0x5f,
	0xa9, 0x12, 0xab, 0x9e, 0x62, 0x21, 0x67, 0xac, 0xee, 0xe3, 0x36, 0x92, 0xd6, 0x43, 0xf2, 0x97,
	0x1e, 0x9a, 0x3e, 0x74, 0xc7, 0xcb, 0x70, 0x71, 0xa6, 0x16, 0x15, 0xe5, 0x17, 0x25, 0xe7, 0xa7,
	0xa4, 0x42, 0xdd, 0x8f, 0x10, 0x48, 0x62, 0x03, 0x9b, 0x61, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff,
	0x8c, 0x5e, 0x4b, 0x50, 0x46, 0x01, 0x00, 0x00,
}

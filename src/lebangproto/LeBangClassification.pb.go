// Code generated by protoc-gen-go.
// source: LeBangClassification.proto
// DO NOT EDIT!

package lebangproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ClassificationView struct {
	Name    string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Typeids string `protobuf:"bytes,2,opt,name=typeids" json:"typeids,omitempty"`
}

func (m *ClassificationView) Reset()                    { *m = ClassificationView{} }
func (m *ClassificationView) String() string            { return proto.CompactTextString(m) }
func (*ClassificationView) ProtoMessage()               {}
func (*ClassificationView) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ClassificationView) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassificationView) GetTypeids() string {
	if m != nil {
		return m.Typeids
	}
	return ""
}

type Classification struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Typeid int32  `protobuf:"varint,2,opt,name=typeid" json:"typeid,omitempty"`
}

func (m *Classification) Reset()                    { *m = Classification{} }
func (m *Classification) String() string            { return proto.CompactTextString(m) }
func (*Classification) ProtoMessage()               {}
func (*Classification) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *Classification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Classification) GetTypeid() int32 {
	if m != nil {
		return m.Typeid
	}
	return 0
}

type ClassificationRes struct {
	Name           string               `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Typeid         int32                `protobuf:"varint,2,opt,name=typeid" json:"typeid,omitempty"`
	Classification []*SubClassification `protobuf:"bytes,3,rep,name=classification" json:"classification,omitempty"`
}

func (m *ClassificationRes) Reset()                    { *m = ClassificationRes{} }
func (m *ClassificationRes) String() string            { return proto.CompactTextString(m) }
func (*ClassificationRes) ProtoMessage()               {}
func (*ClassificationRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *ClassificationRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ClassificationRes) GetTypeid() int32 {
	if m != nil {
		return m.Typeid
	}
	return 0
}

func (m *ClassificationRes) GetClassification() []*SubClassification {
	if m != nil {
		return m.Classification
	}
	return nil
}

type SubClassification struct {
	// 父类型id
	Parenttypeid int32 `protobuf:"varint,1,opt,name=parenttypeid" json:"parenttypeid,omitempty"`
	// 节点类型id
	Typeid int32 `protobuf:"varint,2,opt,name=typeid" json:"typeid,omitempty"`
	// 类型名称
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 图片名称
	Image string `protobuf:"bytes,4,opt,name=image" json:"image,omitempty"`
}

func (m *SubClassification) Reset()                    { *m = SubClassification{} }
func (m *SubClassification) String() string            { return proto.CompactTextString(m) }
func (*SubClassification) ProtoMessage()               {}
func (*SubClassification) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *SubClassification) GetParenttypeid() int32 {
	if m != nil {
		return m.Parenttypeid
	}
	return 0
}

func (m *SubClassification) GetTypeid() int32 {
	if m != nil {
		return m.Typeid
	}
	return 0
}

func (m *SubClassification) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubClassification) GetImage() string {
	if m != nil {
		return m.Image
	}
	return ""
}

type GetSubClassificationViewReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetSubClassificationViewReq) Reset()                    { *m = GetSubClassificationViewReq{} }
func (m *GetSubClassificationViewReq) String() string            { return proto.CompactTextString(m) }
func (*GetSubClassificationViewReq) ProtoMessage()               {}
func (*GetSubClassificationViewReq) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *GetSubClassificationViewReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GetSubClassificationRes struct {
	Classification []*ClassificationRes `protobuf:"bytes,1,rep,name=classification" json:"classification,omitempty"`
	Errorcode      string               `protobuf:"bytes,2,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (m *GetSubClassificationRes) Reset()                    { *m = GetSubClassificationRes{} }
func (m *GetSubClassificationRes) String() string            { return proto.CompactTextString(m) }
func (*GetSubClassificationRes) ProtoMessage()               {}
func (*GetSubClassificationRes) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *GetSubClassificationRes) GetClassification() []*ClassificationRes {
	if m != nil {
		return m.Classification
	}
	return nil
}

func (m *GetSubClassificationRes) GetErrorcode() string {
	if m != nil {
		return m.Errorcode
	}
	return ""
}

func init() {
	proto.RegisterType((*ClassificationView)(nil), "lebangproto.ClassificationView")
	proto.RegisterType((*Classification)(nil), "lebangproto.Classification")
	proto.RegisterType((*ClassificationRes)(nil), "lebangproto.ClassificationRes")
	proto.RegisterType((*SubClassification)(nil), "lebangproto.SubClassification")
	proto.RegisterType((*GetSubClassificationViewReq)(nil), "lebangproto.GetSubClassificationViewReq")
	proto.RegisterType((*GetSubClassificationRes)(nil), "lebangproto.GetSubClassificationRes")
}

func init() { proto.RegisterFile("LeBangClassification.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x51, 0xc1, 0x4a, 0x03, 0x31,
	0x10, 0x25, 0x6e, 0x5b, 0xe9, 0x54, 0x0a, 0x1d, 0x44, 0x83, 0x8a, 0x94, 0x9c, 0x7a, 0x5a, 0x50,
	0xaf, 0x9e, 0x2a, 0xe8, 0xc5, 0xd3, 0x0a, 0xde, 0xb3, 0xdb, 0x71, 0x09, 0xb4, 0xc9, 0x9a, 0x8d,
	0x48, 0x4f, 0x1e, 0xfd, 0x6d, 0x69, 0xba, 0xc5, 0xcd, 0x6e, 0x3c, 0x78, 0xcb, 0x7b, 0xcc, 0x7b,
	0x2f, 0xf3, 0x06, 0x2e, 0x9e, 0x69, 0x29, 0x75, 0xf9, 0xb0, 0x96, 0x75, 0xad, 0xde, 0x54, 0x21,
	0x9d, 0x32, 0x3a, 0xad, 0xac, 0x71, 0x06, 0x27, 0x6b, 0xca, 0xa5, 0x2e, 0x3d, 0x10, 0x4b, 0xc0,
	0x70, 0xe8, 0x55, 0xd1, 0x27, 0x22, 0x0c, 0xb4, 0xdc, 0x10, 0x67, 0x73, 0xb6, 0x18, 0x67, 0xfe,
	0x8d, 0x1c, 0x8e, 0xdd, 0xb6, 0x22, 0xb5, 0xaa, 0xf9, 0x91, 0xa7, 0x0f, 0x50, 0xdc, 0xc3, 0x34,
	0xf4, 0x88, 0xea, 0xcf, 0x60, 0xb4, 0x17, 0x78, 0xf9, 0x30, 0x6b, 0x90, 0xf8, 0x66, 0x30, 0x0b,
	0xe5, 0x19, 0xd5, 0xff, 0x71, 0xc0, 0x47, 0x98, 0x16, 0x81, 0x01, 0x4f, 0xe6, 0xc9, 0x62, 0x72,
	0x7b, 0x9d, 0xb6, 0x36, 0x4d, 0x5f, 0x3e, 0xf2, 0x4e, 0x4c, 0x47, 0x25, 0xb6, 0x30, 0xeb, 0x0d,
	0xa1, 0x80, 0x93, 0x4a, 0x5a, 0xd2, 0xae, 0x89, 0x66, 0x3e, 0x3a, 0xe0, 0xfe, 0xfc, 0xd8, 0x61,
	0x89, 0xa4, 0xb5, 0xc4, 0x29, 0x0c, 0xd5, 0x46, 0x96, 0xc4, 0x07, 0x9e, 0xdc, 0x03, 0x71, 0x03,
	0x97, 0x4f, 0xe4, 0x7a, 0xe9, 0xbb, 0x63, 0x64, 0xf4, 0x1e, 0x6b, 0x43, 0x7c, 0xc1, 0x79, 0x4c,
	0xb2, 0x2b, 0xaf, 0x5f, 0x08, 0x8b, 0x14, 0xd2, 0xd3, 0x75, 0x0b, 0xc1, 0x2b, 0x18, 0x93, 0xb5,
	0xc6, 0x16, 0x66, 0x45, 0xcd, 0xd1, 0x7f, 0x89, 0x7c, 0xe4, 0x6d, 0xee, 0x7e, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x40, 0x19, 0x2d, 0xfa, 0x6c, 0x02, 0x00, 0x00,
}

// Code generated by protoc-gen-go.
// source: LeBangClassification.proto
// DO NOT EDIT!

/*
Package lebangproto is a generated protocol buffer package.

It is generated from these files:
	LeBangClassification.proto
	LeBangOrder.proto
	LeBangProto.proto

It has these top-level messages:
	Classification
	ClassificationType
	GetClassificationRes
	Order
	GetOrderRes
	CancelOrder
	Response
	SignIn
	SignInRes
	SignUp
	SignUpRes
	SignUpBak
	UserAddress
	IDCode
	GetIDCode
	UserInfo
	GetErrandCommonMerchant
	ErrandCommonMerchant
	ResErrandCommonMerchant
	GetAddressRes
	ModifyAddress
	DeleteAddress
	DefaultAddressRes
*/
package lebangproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Classification struct {
	Classification string `protobuf:"bytes,1,opt,name=classification" json:"classification,omitempty"`
	Labels         string `protobuf:"bytes,2,opt,name=labels" json:"labels,omitempty"`
	Hint           string `protobuf:"bytes,3,opt,name=hint" json:"hint,omitempty"`
}

func (m *Classification) Reset()                    { *m = Classification{} }
func (m *Classification) String() string            { return proto.CompactTextString(m) }
func (*Classification) ProtoMessage()               {}
func (*Classification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Classification) GetClassification() string {
	if m != nil {
		return m.Classification
	}
	return ""
}

func (m *Classification) GetLabels() string {
	if m != nil {
		return m.Labels
	}
	return ""
}

func (m *Classification) GetHint() string {
	if m != nil {
		return m.Hint
	}
	return ""
}

type ClassificationType struct {
	Typename string `protobuf:"bytes,1,opt,name=typename" json:"typename,omitempty"`
}

func (m *ClassificationType) Reset()                    { *m = ClassificationType{} }
func (m *ClassificationType) String() string            { return proto.CompactTextString(m) }
func (*ClassificationType) ProtoMessage()               {}
func (*ClassificationType) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClassificationType) GetTypename() string {
	if m != nil {
		return m.Typename
	}
	return ""
}

type GetClassificationRes struct {
	Classification *Classification `protobuf:"bytes,1,opt,name=classification" json:"classification,omitempty"`
	Errorcode      string          `protobuf:"bytes,2,opt,name=errorcode" json:"errorcode,omitempty"`
}

func (m *GetClassificationRes) Reset()                    { *m = GetClassificationRes{} }
func (m *GetClassificationRes) String() string            { return proto.CompactTextString(m) }
func (*GetClassificationRes) ProtoMessage()               {}
func (*GetClassificationRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetClassificationRes) GetClassification() *Classification {
	if m != nil {
		return m.Classification
	}
	return nil
}

func (m *GetClassificationRes) GetErrorcode() string {
	if m != nil {
		return m.Errorcode
	}
	return ""
}

func init() {
	proto.RegisterType((*Classification)(nil), "lebangproto.Classification")
	proto.RegisterType((*ClassificationType)(nil), "lebangproto.ClassificationType")
	proto.RegisterType((*GetClassificationRes)(nil), "lebangproto.GetClassificationRes")
}

func init() { proto.RegisterFile("LeBangClassification.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0xf2, 0x49, 0x75, 0x4a,
	0xcc, 0x4b, 0x77, 0xce, 0x49, 0x2c, 0x2e, 0xce, 0x4c, 0xcb, 0x4c, 0x4e, 0x2c, 0xc9, 0xcc, 0xcf,
	0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xce, 0x49, 0x4d, 0x4a, 0xcc, 0x4b, 0x07, 0x73,
	0x94, 0x52, 0xb8, 0xf8, 0x50, 0x15, 0x09, 0xa9, 0x71, 0xf1, 0x25, 0xa3, 0x88, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0x70, 0x06, 0xa1, 0x89, 0x0a, 0x89, 0x71, 0xb1, 0xe5, 0x24, 0x26, 0xa5, 0xe6, 0x14,
	0x4b, 0x30, 0x81, 0xe5, 0xa1, 0x3c, 0x21, 0x21, 0x2e, 0x96, 0x8c, 0xcc, 0xbc, 0x12, 0x09, 0x66,
	0xb0, 0x28, 0x98, 0xad, 0x64, 0xc0, 0x25, 0x84, 0x6a, 0x4b, 0x48, 0x65, 0x41, 0xaa, 0x90, 0x14,
	0x17, 0x47, 0x49, 0x65, 0x41, 0x6a, 0x5e, 0x62, 0x6e, 0x2a, 0xd4, 0x0e, 0x38, 0x5f, 0xa9, 0x92,
	0x4b, 0xc4, 0x3d, 0xb5, 0x04, 0x55, 0x53, 0x50, 0x6a, 0xb1, 0x90, 0x33, 0x56, 0xd7, 0x71, 0x1b,
	0x49, 0xeb, 0x21, 0xf9, 0x4a, 0x0f, 0x4d, 0x1f, 0xba, 0xd3, 0x65, 0xb8, 0x38, 0x53, 0x8b, 0x8a,
	0xf2, 0x8b, 0x92, 0xf3, 0x53, 0x52, 0xa1, 0xae, 0x47, 0x08, 0x24, 0xb1, 0x81, 0xcd, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x1b, 0xfe, 0xaf, 0x44, 0x01, 0x00, 0x00,
}
